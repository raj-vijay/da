# -*- coding: utf-8 -*-
"""Copy of CP TASK 1 (Logic Puzzle, 23 points).ipynb

Automatically generated by Colaboratory.

## Constraint Programming

In this task, develop a constraint satisfaction model that solves the following logical puzzle:

- Carol, Elisa, Oliver and Lucas are going to varsity.
- One of them is going to London (1).
- Exactly one boy and one girl chose a varsity in a city with the same initial of their names (2).
- A boy is from Australia, the other studies History (3).
- A girl goes to Cambridge, the other studies Medicine (4).
- Oliver studies Law or is from USA; He is not from South Africa (5).
- The student from Canada is a historian or will go to Oxford (6).
- The student from South Africa is going to Edinburgh or will study Law (7).

What is the nationality of the architecture student?

### 1. Install Prerequisites
"""

!pip install ortools

from ortools.sat.python import cp_model

"""### 2. Model the Problem

First, we identify the predicates of the problem domain:

- Nationality
- Sex (Boy or Girl)
- Program
- University
- Initial of the Students

All of these predicates operate on the same object domain, i.e the students.
"""

# Define student as a the object and the domain as the list of students
students = ["Carol", "Elisa",  "Lucas", "Oliver"]

"""Define attributes and attribute domains for the object"""

# Define attribute for student sex and attribute domain as the list of values, i.e girl or boy
sex = ["girl", "boy"]

# Define attribute for county of origin aka nationality and attribute domain as the list of countries
country = ["Australia", "Canada", "South Africa", "USA"]

# Define attribute for university and attribute domain as the list of university names
varsity = ["Cambridge", "Edinburgh", "London", "Oxford"]

# Define attribute for study program and attribute domain as the list of values
program = ["architecture", "history", "law", "medicine"]

# Define attribute for student initials and attribute domain as the list of initials 
# Note that this attribute is same as the object and need not be used as an attribute
# The problem can be modeled with or without this attribute definition
initial = ["C", "E", "O", "L"]

"""### 3. Define Functions"""

# Note: Some of the sections here in the assignment is built on basing the Zebra Puzzle Assignment Solution implemented during the course
class SolutionPrinter(cp_model.CpSolverSolutionCallback):
  def __init__(self, country, sex, program, varsity):
    cp_model.CpSolverSolutionCallback.__init__(self)
    self.sex_ = sex
    self.country_ = country
    self.program_ = program
    self.varsity_ = varsity
    self.solutions_ = 0

  def OnSolutionCallback(self):
    self.solutions_ = self.solutions_ + 1
    print("Solution", self.solutions_)
    print()
    for st in students:
      print(st + ", ", end = '')
      for s in sex:
        if (self.Value(self.sex_[st][s])):
          print("the", s + " from ", end = '')
      for c in country:
        if (self.Value(self.country_[st][c])):
          print(c + ", is studying ", end = '')
      for p in program:
        if (self.Value(self.program_[st][p])):
          print(p + " at the University of ", end = '' )
      for v in varsity:
        if (self.Value(self.varsity_[st][v])):
          print(v + '.')
      print()

"""### 4. Create Constraint Programing Model

**Object**: Students

**Predicates**: Country, Sex, Program, University

**Attributes**:
1. **Sex**: Girl, Boy
2. **Country**: Australia, USA, Canada, South Africa
3. **Program**: Architecture, History, Law, Medicine
4. **University**: Cambridge, Edinburgh, London, Oxford

#### 4.1 Instantiate Model
"""

# Create contsraint programing model object
model = cp_model.CpModel()

"""#### 4.2 Add Object-Attribute Combinations

Add the N x N Boolean variables corresponding to all combinations of objects and attributes.
"""

# Add the 4 x 2 boolean variable combinations for all students and their sex
st_sex = {}

model, st_sex = boolean_model(model, students, st_sex, sex)

# Add the 4 x 4 boolean variable combinations for all students and their countries
st_country = {}

model, st_country = boolean_model(model, students, st_country, country)

# Add the 4 x 4 boolean variable combinations for all students and their programs
st_program = {}

model, st_program = boolean_model(model, students, st_program, program)

# Add the 4 x 4 boolean variable combinations for all students and their universities
st_varsity = {}

model, st_varsity = boolean_model(model, students, st_varsity, varsity)

"""#### 4.3 Add Model Constraints

Assign sex for the students
"""

"""Now, we revist the problem, go sentence by sentence and re-formulate in first-order logic

Carol, Elisa, Oliver and Lucas are going to university.
1. One of them is going to London (1).
2. Exactly one boy and one girl chose a university in a city with the same initial of their names (2).
3. A boy is from Australia, the other studies History (3).
4. A girl goes to Cambridge, the other studies Medicine (4).
5. Oliver studies Law or is from USA; He is not from South Africa (5).
6. The student from Canada is a historian or will go to Oxford (6).
7. The student from South Africa is going to Edinburgh or will study Law (7).

One of them is going to London (1).

Exactly one boy and one girl chose a university in a city with the same initial of their names (2).
"""

model.AddBoolOr([
  st_varsity["Carol"]["Cambridge"],
  st_varsity["Elisa"]["Edinburgh"],
  st_varsity["Lucas"]["London"],
  st_varsity["Oliver"]["Oxford"],
  st_varsity["Lucas"]["London"].Not(),
  st_varsity["Oliver"]["Oxford"].Not(),
  st_varsity["Carol"]["Cambridge"].Not(),
  st_varsity["Elisa"]["Edinburgh"].Not(),
  ])

model.AddBoolAnd([
  st_varsity["Carol"]["Cambridge"],
  ]).OnlyEnforceIf(st_varsity["Elisa"]["Edinburgh"].Not()),
  st_varsity["Elisa"]["Edinburgh"],
  ]).OnlyEnforceIf(st_varsity["Carol"]["Cambridge"].Not())

model.AddBoolAnd([
  st_varsity["Lucas"]["London"],
  ]).OnlyEnforceIf(st_varsity["Oliver"]["Oxford"].Not())

model.AddBoolAnd([
  st_varsity["Oliver"]["Oxford"],
  ]).OnlyEnforceIf(st_varsity["Lucas"]["London"].Not())

"""A boy is from Australia, the other studies History (3)."""

model.AddBoolAnd([
  st_country["Oliver"]["Australia"],
  st_program["Lucas"]["history"],
  st_country["Lucas"]["Australia"].Not(),
  ]).OnlyEnforceIf(st_program["Oliver"]["history"].Not())

model.AddBoolAnd([
  st_country["Lucas"]["Australia"],
  st_country["Oliver"]["Australia"].Not(),
  st_program["Oliver"]["history"]
  ]).OnlyEnforceIf(st_program["Lucas"]["history"].Not())

"""A girl goes to Cambridge, the other studies Medicine (4)."""

model.AddBoolAnd([
  st_varsity["Elisa"]["Cambridge"],
  st_program["Carol"]["medicine"],
  st_varsity["Carol"]["Cambridge"].Not(),
  ]).OnlyEnforceIf(st_program["Elisa"]["medicine"].Not())

model.AddBoolAnd([
  st_varsity["Carol"]["Cambridge"],
  st_program["Elisa"]["medicine"],
  st_varsity["Elisa"]["Cambridge"].Not(),
  ]).OnlyEnforceIf(st_program["Carol"]["medicine"].Not())

"""Oliver studies Law or is from USA; He is not from South Africa (5)."""

model.AddBoolOr([
  st_country["Oliver"]["USA"],
  st_country["Oliver"]["South Africa"].Not(),
  st_program["Oliver"]["law"]
  ])

model.AddBoolAnd([
  st_program["Oliver"]["law"],
  st_country["Oliver"]["South Africa"].Not(),
  ]).OnlyEnforceIf(st_country["Oliver"]["USA"].Not())

model.AddBoolAnd([
  st_country["Oliver"]["USA"],
  st_country["Oliver"]["South Africa"].Not(),
    ]).OnlyEnforceIf(st_program["Oliver"]["law"].Not())

"""The student from Canada is a historian or will go to Oxford (6)."""

for st in students:
  model.AddBoolOr([
    st_program[st]["history"],
    st_varsity[st]["Oxford"]
  ]).OnlyEnforceIf(st_country[st]["Canada"])

"""The student from South Africa is going to Edinburgh or will study Law (7)."""

for st in students:
  model.AddBoolOr([
    st_varsity[st]["Edinburgh"],
    st_program[st]["law"],
    ]).OnlyEnforceIf(st_country[st]["South Africa"])

"""#### 4.4 Add Implicit Assumptions

There are some implicit assumptions that are not explicitly stated in the text.
1. Every student belongs to a country
2. Every student studies a program
3. Every student attends a university
4. All of the students belong to different countries, i.e. no two students are from the same country
5. All of the students are studying a seperate program, i.e. no two students have enrolled in the same program
6. All of the students are attending a different university, i.e. no two students go to the same university
"""

# Assign sex for students in the list
model.AddBoolAnd([
  # So, assuming no unisex names, Carol and Elisa are girls
  st_sex["Carol"]["girl"],
  st_sex["Elisa"]["girl"],

  # And not boys.
  st_sex["Carol"]["boy"].Not(),
  st_sex["Elisa"]["boy"].Not()

  # Similarly, assuming no unisex names, Lucas and Oliver are boys
  st_sex["Lucas"]["boy"],
  st_sex["Oliver"]["boy"],
  # And not girls.      
  st_sex["Lucas"]["girl"].Not(),
  st_sex["Oliver"]["girl"].Not()
  ])

for st in students:
  # Every student belongs to a country (1)
  var = []
  for c in country:
    var.append(st_country[st][c])
  model.AddBoolOr(var)

  # Every student studies a program (2)
  var = []
  for p in program:
    var.append(st_program[st][p])
  model.AddBoolOr(var)

  # Every student attends a university (3)
  var = []
  for v in varsity:
    var.append(st_varsity[st][v])
  model.AddBoolOr(var)

for i in range(len(students)):
  for j in range(i + 1, len(students)):

  # All of the students belong to different countries (4)
    for k in range(len(country)):
      model.AddBoolOr([
        st_country[students[i]][country[k]].Not(),
        st_country[students[j]][country[k]].Not()
        ])

  # All of the students are studying a seperate program (5)
    for k in range(len(program)):
      model.AddBoolOr([
        st_program[students[i]][program[k]].Not(),
        st_program[students[j]][program[k]].Not()
        ])

  # All of the students are attending a different university
    for k in range(len(varsity)):
      model.AddBoolOr([
        st_varsity[students[i]][varsity[k]].Not(),
        st_varsity[students[j]][varsity[k]].Not()
        ])

# All of the students belong to different countries (4)
for k in range(len(country)):
  model.AddBoolOr([
    st_country[students[0]][country[k]].Not(),
    st_country[students[-1]][country[k]].Not()
    ])
# All of the students are studying a seperate program (5)
for k in range(len(program)):
  model.AddBoolOr([
    st_program[students[0]][program[k]].Not(),
    st_program[students[-1]][program[k]].Not()
    ])

# All of the students are attending a different university (6)
for k in range(len(varsity)):
  model.AddBoolOr([
    st_varsity[students[0]][varsity[k]].Not(),
    st_varsity[students[-1]][varsity[k]].Not()
  ])

"""#### 4.5 Define and Implement Solver"""

solver = cp_model.CpSolver()

"""Search for all Solutions

#### 4.6 Solution
"""

solver.SearchForAllSolutions(model, SolutionPrinter(
        st_country,
        st_sex,
        st_program,
        st_varsity,
    ))

for st in students:
  for c in country:
    if solver.Value(st_country[st][c]):
      print("{} is from {}.".format(st, c))

"""**What is the nationality of the architecture student?**"""

for st in students:
  if solver.Value(st_program[st]["architecture"]):
    for c in country:
      if solver.Value(st_country[st][c]):
        print("The architecture student is from " + c + ".")
        break

"""#### 4.7 Validation

Carol, Elisa, Oliver and Lucas are going to university.
1. One of them is going to London (1): 
- Lucas
2. Exactly one boy and one girl chose a university in a city with the same initial of their names (2): 
- Carol, the girl, is at Cambridge and Lucas, the boy is at London
3. A boy is from Australia, the other studies History (3): 
- Lucas, the boy, is from Australia and Oliver, the other boy studies history.
4. A girl goes to Cambridge, the other studies Medicine (4): 
- Elisa, the girl from Canada is studying medicne.
5. Oliver studies Law or is from USA; He is not from South Africa (5): 
- Yes, Oliver in from USA. He is neither studying law, nor is he from South Africa.
6. The student from Canada is a historian or will go to Oxford (6): 
- Yes, Elisa, the girl from Canada goes to Oxford. She is not studying history.
7. The student from South Africa is going to Edinburgh or will study Law (7): 
- Yes, Carol, the girl from South Africa studies law.
"""
